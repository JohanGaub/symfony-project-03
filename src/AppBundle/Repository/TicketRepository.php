<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{
    const MAX_RESULT = 10;


    /**
     * @param int $page
     * @param int $maxTickets
     * @return Paginator
     */
    public function getList($page = 1, $maxTickets = 10)
    {
        $q = $this->createQueryBuilder('t')
            ->orderBy('t.emergency', 'ASC')
            ->addOrderBy('t.id', 'DESC')
            ->setFirstResult(($page - 1) * $maxTickets)
            ->setMaxResults($maxTickets)
            ->getQuery();
        //exit(dump($q->getQuery()->getResult()));

        return new Paginator($q, $fetchJoinCollection = false);
    }

    /**
     * @return mixed
     */
    public function countTicketTotal()
    {
        $q = $this->createQueryBuilder('t')
            ->select('COUNT(t)')
            ->getQuery()->getSingleScalarResult();
        return $q;
    }

    public function getRowsByPage($page, $filter)
    {
        $alias  = "t";
        $query  = $this->createQueryBuilder($alias)
            ->select($alias)
            ->setFirstResult(($page - 1) * self::MAX_RESULT)
            ->setMaxResults(self::MAX_RESULT);
        if(!is_null($filter)) {
            foreach ($filter as $field => $value) {
                if ($value !== "") {
                    if (strpos($field, "_") !== 0) {
                        $search = "$alias.$field like '%$value%'";
                        $query->andWhere($search);
                    }
                }
            }
        }
        return $query->getQuery();
    }

}
