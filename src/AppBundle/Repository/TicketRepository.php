<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{
    const MAX_RESULT = 10;


    /**
     * @param int $page
     * @param int $maxTickets
     * @return Paginator
     */
    public function getList($page = 1, $maxTickets = 10)
    {
        $q = $this->createQueryBuilder('t')
            ->orderBy('t.emergency', 'ASC')
            ->addOrderBy('t.id', 'DESC')
            ->setFirstResult(($page - 1) * $maxTickets)
            ->setMaxResults($maxTickets)
            ->getQuery();
        //exit(dump($q->getQuery()->getResult()));

        return new Paginator($q, $fetchJoinCollection = false);
    }

    /**
     * @return mixed
     */
    public function countTicketTotal()
    {
        $q = $this->createQueryBuilder('t')
            ->select('COUNT(t)')
            ->getQuery()->getSingleScalarResult();
        return $q;
    }

    /**
     * @param $page
     * @param $filter
     * @return \Doctrine\ORM\Query
     */
    public function getRowsByPage($page, $filter)
    {
        /*$alias  = "t";
        $query  = $this->createQueryBuilder($alias)
            ->select($alias)
            ->setFirstResult(($page - 1) * self::MAX_RESULT)
            ->setMaxResults(self::MAX_RESULT);
        if(!is_null($filter)) {
            foreach ($filter as $field => $value) {
                if ($value !== "") {
                    if (strpos($field, "_") !== 0) {
                        $search = "$alias.$field like '%$value%'";
                        $query->andWhere($search);
                    }
                }
            }
        }
        return $query->getQuery();*/


        $query = $this->createQueryBuilder('t')
            ->select('dts', 'c', 'ct', 'u', 't', 'cp', 'o')
            ->join('t.status','dts', 't.status = dts.id')
            ->join('t.category','c','t.category = c.id')
            ->join('t.user','u','t.user = u.id')
            ->join('c.type', 'ct', 'c.type = ct.id')
            ->join('u.company', 'cp', 'u.company = cp.id')
            ->join('t.origin', 'o', 't.origin = o.id')
            ->orderBy('t.id', 'DESC')
            ->setFirstResult(($page - 1) * self::MAX_RESULT)
            ->setMaxResults(self::MAX_RESULT);
        if(!is_null($filter)) {
            foreach ($filter as $field => $value) {
                if($value !== '') {
                    if(strpos($field, '_') !== 0) {
                        switch($field) {
                            case 'status':
                                $alias = 'dts';
                                $field = 'id';
                                break;
                            case 'categoryType':
                                $alias = 'ct';
                                $field = 'id';
                                break;
                            case 'category':
                                $alias = 'c';
                                $field = 'id';
                                break;
                            case 'company':
                                $alias = 'cp';
                                $field = 'name';
                                break;
                            case 'origin':
                                $alias = 'o';
                                $field = 'id';
                                break;
                            default:
                                $alias = 't';
                        }
                        if ($alias == 't' or $alias == 'cp') {
                            $search = "$alias.$field like '%$value%'";
                        } else {
                            $search ="$alias.$field = '$value'";
                        }
                        $query->andWhere($search);

                    }
                }
            }
        }
        return $query->getQuery();
    }

}
